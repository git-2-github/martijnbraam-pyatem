commit e77b35b41524d1caefec94345937862d0f3505a7
Author: Stefan de Konink <stefan@konink.de>
Date:   Wed Apr 7 01:54:25 2021 +0200

    audio

diff --git a/gtk_switcher/atemwindow.py b/gtk_switcher/atemwindow.py
index 67da119..dd3f3af 100644
--- a/gtk_switcher/atemwindow.py
+++ b/gtk_switcher/atemwindow.py
@@ -251,6 +251,8 @@ class AtemWindow(SwitcherPage, MediaPage, AudioPage, CameraPage, MidiControl):
             self.on_transition_wipe_change(data)
         elif field == 'transition-dve':
             self.on_transition_dve_change(data)
+        elif field == 'audio-master-properties':
+            self.on_audio_master_properties_change(data)
         elif field == 'fairlight-master-properties':
             self.on_fairlight_master_properties_change(data)
         elif field == 'fairlight-audio-input':
@@ -261,6 +263,8 @@ class AtemWindow(SwitcherPage, MediaPage, AudioPage, CameraPage, MidiControl):
             self.on_fairlight_strip_properties_change(data)
         elif field == 'fairlight-tally':
             self.on_fairlight_tally_change(data)
+        elif field == 'audio-mixer-tally':
+            self.on_audio_mixer_tally_change(data)
         elif field == 'key-properties-base':
             self.on_key_properties_base_change(data)
         elif field == 'key-properties-luma':
diff --git a/gtk_switcher/audio.py b/gtk_switcher/audio.py
index c2e2a83..c9853f1 100644
--- a/gtk_switcher/audio.py
+++ b/gtk_switcher/audio.py
@@ -1,6 +1,6 @@
 import gi
 
-from pyatem.command import FairlightStripPropertiesCommand
+from pyatem.command import AudioInputCommand, FairlightStripPropertiesCommand
 
 gi.require_version('Gtk', '3.0')
 from gi.repository import Gtk, GLib, GObject, Gio, Gdk
@@ -25,6 +25,11 @@ class AudioPage:
         self.audio_afv = {}
         self.audio_monitor = {}
 
+    def on_audio_mixer_tally_change(self, data):
+        for strip_id in data.tally:
+            if strip_id in self.audio_tally:
+                self.set_class(self.audio_tally[strip_id], 'program', data.tally[strip_id])
+
     def on_fairlight_tally_change(self, data):
         for strip_id in data.tally:
             if strip_id in self.audio_tally:
@@ -59,6 +64,18 @@ class AudioPage:
             cmd = FairlightStripPropertiesCommand(source=widget.source, channel=widget.channel,
                                                   volume=int(widget.get_value()))
             self.connection.mixer.send_commands([cmd])
+        elif self.mixer == 'atem':
+            cmd = AudioInputCommand(source=widget.source, volume=int(widget.get_value()))
+            self.connection.mixer.send_commands([cmd])
+
+    def on_pan_changed(self, widget, *args):
+        if self.mixer == 'fairlight':
+            cmd = FairlightStripPropertiesCommand(source=widget.source, channel=widget.channel,
+                                                  balance=int(widget.get_value()))
+            self.connection.mixer.send_commands([cmd])
+        elif self.mixer == 'atem':
+            cmd = AudioInputCommand(source=widget.source, balance=int(widget.get_value()))
+            self.connection.mixer.send_commands([cmd])
 
     def on_audio_input_change(self, data):
         self.mixer = 'atem'
@@ -67,7 +84,23 @@ class AudioPage:
             self.on_audio_input_list_change()
             return
 
+        self.audio_strip[data.strip_id] = data
+        if data.strip_id not in self.volume_level:
+            self.volume_level[data.strip_id] = Gtk.Adjustment(0, 65381, 0, 10, 10, 100)
+            self.pan[data.strip_id] = Gtk.Adjustment(0, -10000, 10000, 10, 10, 100)
+            self.volume_level[data.strip_id].connect('value-changed', self.on_volume_changed)
+            self.pan[data.strip_id].source = input.index
+            self.pan[data.strip_id].connect('value-changed', self.on_pan_changed)
+
         self.volume_level[data.strip_id].set_value(data.volume)
+        self.pan[data.strip_id].set_value(data.balance)
+        if data.strip_id in self.audio_tally:
+             tally = self.audio_tally[data.strip_id]
+             self.set_class(tally, 'afv', data.state == 2)
+        if data.strip_id in self.audio_on:
+             self.set_class(self.audio_on[data.strip_id], 'program', data.state == 1)
+             self.set_class(self.audio_afv[data.strip_id], 'active', data.state == 2)
+
 
     def on_audio_input_list_change(self):
         inputs = self.connection.mixer.mixerstate['audio-input']
@@ -117,8 +150,10 @@ class AudioPage:
             if strip_id not in self.volume_level:
                 self.volume_level[strip_id] = Gtk.Adjustment(input.volume, 0, 65381, 10, 10, 100)
                 self.pan[strip_id] = Gtk.Adjustment(input.balance, -10000, 10000, 10, 10, 100)
-                self.volume_level[strip_id].connect('value-changed', self.on_volume_changed)
                 self.volume_level[strip_id].source = input.index
+                self.volume_level[strip_id].connect('value-changed', self.on_volume_changed)
+                self.pan[strip_id].source = input.index
+                self.pan[strip_id].connect('value-changed', self.on_pan_changed)
 
                 tally = Gtk.Box()
                 tally.get_style_context().add_class('tally')
@@ -169,11 +204,11 @@ class AudioPage:
                 routing_grid.set_column_spacing(8)
                 on = Gtk.Button(label="ON")
                 on.source = input.index
-                # on.connect('clicked', self.do_audio_channel_on)
+                on.connect('clicked', self.do_audio_channel_on)
                 on.get_style_context().add_class('bmdbtn')
                 routing_grid.attach(on, 0, 0, 1, 1)
                 afv = Gtk.Button(label="AFV")
-                # afv.connect('clicked', self.do_audio_channel_afv)
+                afv.connect('clicked', self.do_audio_channel_afv)
                 afv.get_style_context().add_class('bmdbtn')
                 afv.source = input.index
                 if input.type == 2:
@@ -464,3 +499,16 @@ class AudioPage:
     def on_fairlight_master_properties_change(self, data):
         return
         self.set_class(self.ftb_afv, 'active', data.afv)
+
+    def on_audio_master_properties_change(self, data):
+        return
+        self.set_class(self.ftb_afv, 'active', data.afv)
+
+    def do_audio_channel_on(self, widget, *args):
+        cmd = AudioInputCommand(source=widget.source, on=(not widget.get_style_context().has_class('program')))
+        self.connection.mixer.send_commands([cmd])
+
+    def do_audio_channel_afv(self, widget, *args):
+        cmd = AudioInputCommand(source=widget.source, afv=(not widget.get_style_context().has_class('active')))
+        self.connection.mixer.send_commands([cmd])
+
diff --git a/gtk_switcher/switcher.py b/gtk_switcher/switcher.py
index 7a624fc..b4622e6 100644
--- a/gtk_switcher/switcher.py
+++ b/gtk_switcher/switcher.py
@@ -1,7 +1,7 @@
 from gtk_switcher.layout import LayoutView
 from pyatem.command import CutCommand, AutoCommand, FadeToBlackCommand, TransitionSettingsCommand, WipeSettingsCommand, \
     TransitionPositionCommand, TransitionPreviewCommand, ColorGeneratorCommand, MixSettingsCommand, DipSettingsCommand, \
-    DveSettingsCommand, FairlightMasterPropertiesCommand, DkeyRateCommand, DkeyAutoCommand, DkeyTieCommand, \
+    DveSettingsCommand, AudioMasterPropertiesCommand, FairlightMasterPropertiesCommand, DkeyRateCommand, DkeyAutoCommand, DkeyTieCommand, \
     DkeyOnairCommand, ProgramInputCommand, PreviewInputCommand, KeyOnAirCommand, KeyFillCommand, \
     FadeToBlackConfigCommand, RecorderStatusCommand
 from pyatem.field import TransitionSettingsField, InputPropertiesField
@@ -271,6 +271,7 @@ class SwitcherPage:
         self.connection.mixer.send_commands([cmd])
 
     def on_ftb_afv_clicked(self, widget, *args):
+        # TODO: how to distingish between atem and fairlight?
         cmd = FairlightMasterPropertiesCommand(afv=not widget.get_style_context().has_class('active'))
         self.connection.mixer.send_commands([cmd])
 
diff --git a/pyatem/command.py b/pyatem/command.py
index d73a85c..4b0204d 100644
--- a/pyatem/command.py
+++ b/pyatem/command.py
@@ -710,6 +710,119 @@ class DveSettingsCommand(Command):
         return self._make_command('CTDv', data)
 
 
+class AudioMasterPropertiesCommand(Command):
+    """
+    Implementation of the `CAMM` command. This sets the settings the master channel of legacy audio.
+
+    ====== ==== ====== ===========
+    Offset Size Type   Description
+    ====== ==== ====== ===========
+    0      1    u8     Mask, see table below
+    1      1    u8     unknown
+    2      2    u16    Master volume [0 - 65381]
+    4      3    ?      unknown
+    ====== ==== ====== ===========
+
+    === ==========
+    Bit Mask value
+    === ==========
+    0   Volume On/Off
+    1   ?
+    2   ?
+    3   ?
+    4   ?
+    5   ?
+    6   ?
+    7   ?
+    === ==========
+
+
+    """
+
+    def __init__(self, volume=None, volume_enable=None):
+        """
+        """
+
+        self.volume = volume
+        self.volume_enable = volume_enable
+
+    def get_command(self):
+        mask = 0
+        if self.volume_enable is not None:
+            mask |= 1 << 0
+
+        eq_enable = False if self.volume_enable is None else self.volume_enable
+        volume = 0 if self.volume is None else self.volume
+
+        data = struct.pack('>B x H 3x', mask, volume)
+        return self._make_command('CFMP', data)
+
+
+class AudioInputCommand(Command):
+    """
+    Implementation of the `CAMI` command. This sets the settings of a channel strip in legacy audio.
+
+    ====== ==== ====== ===========
+    Offset Size Type   Description
+    ====== ==== ====== ===========
+    0      1    u8     Mask, see table below
+    2      2    u16    Source index
+    4      1    u8     Mix Option [0: Off, 1: On, 2: AFV]
+    5      1    u8     unknown
+    6      2    u16    Volume [0 - 65381]
+    8      2    i16    Balance [-10000 - 10000]
+    10     2    u16    unknown
+    ====== ==== ====== ===========
+
+    === ==========
+    Bit Mask value
+    === ==========
+    0   Mix Option
+    1   Volume
+    2   Balance
+    3   ?
+    4   ?
+    5   ?
+    6   ?
+    7   ?
+    8   ?
+    === ==========
+
+
+    """
+
+    def __init__(self, source, balance=None, volume=None, on=None, afv=None):
+        """
+        :param index: 0-indexed M/E number to control the preview bus of
+        """
+        self.source = source
+        self.balance = balance
+        self.volume = volume
+        self.on = on
+        self.afv = afv
+
+    def get_command(self):
+        mask = 0
+        if self.on is not None or self.afv is not None:
+            mask |= 1 << 0
+        if self.volume is not None:
+            mask |= 1 << 1
+        if self.balance is not None:
+            mask |= 1 << 2
+
+        state = 0
+        if self.on is not None:
+            state = int(bool(self.on))
+        elif self.afv is not None:
+            state = int(bool(self.afv)) * 2
+
+        balance = 0 if self.balance is None else self.balance
+        volume = 0 if self.volume is None else self.volume
+
+        data = struct.pack('>B x H B x H h x x', mask, self.source, state, volume, balance)
+        return self._make_command('CAMI', data)
+
+
 class FairlightMasterPropertiesCommand(Command):
     """
     Implementation of the `CFMP` command. This sets the settings the master channel of fairlight audio.
diff --git a/pyatem/field.py b/pyatem/field.py
index db83448..f8580a7 100644
--- a/pyatem/field.py
+++ b/pyatem/field.py
@@ -1066,6 +1066,100 @@ class TransitionDveField(FieldBase):
         return '<transition-dve: me={}, rate={} style={}>'.format(self.index, self.rate, self.style)
 
 
+class AudioMixerMasterPropertiesField(FieldBase):
+    """
+    Data from the `AMMO`. Settings for the master bus on legacy audio units.
+
+    ====== ==== ====== ===========
+    Offset Size Type   Descriptions
+    ====== ==== ====== ===========
+    0      2    u16    Program Gain
+    2      6    ?      unknown
+    ====== ==== ====== ===========
+
+    After parsing:
+    :ivar volume: Master volume for the mixer, unsigned int which maps [? - ?] to +10dB - -100dB (inf)
+    """
+    def __init__(self, raw):
+        self.raw = raw
+        field = struct.unpack('>H 6x', raw)
+        self.volume = field[0]
+
+    def __repr__(self):
+        return '<audio-master-properties: volume={}>'.format(self.volume)
+
+
+class AudioMixerInputPropertiesField(FieldBase):
+    """
+    Data from the `AMIP`. Settings for a channel strip on legacy audio units.
+
+    ====== ==== ====== ===========
+    Offset Size Type   Descriptions
+    ====== ==== ====== ===========
+    0      2    u16    Audio source index
+    2      1    u8     Type [0: External Video, 1: Media Player, 2: External Audio]
+    3      3    ?      unknown
+    6      1    bool   From Media Player
+    7      1    u8     Plug Type [0: Internal, 1: SDI, 2: HDMI, 3: Component, 4: Composite, 5: SVideo, 32: XLR, 64, AES/EBU, 128 RCA]
+    8      1    u8     Mix Option [0: Off, 1: On, 2: AFV]
+    9      1    u8     unknown
+    10     2    u16    Volume [0 - 65381]
+    12     2    i16    Pan [-10000 - 10000]
+    14     1    u8     unknown
+    ====== ==== ====== ===========
+
+    After parsing:
+    :ivar volume: Master volume for the mixer, signed int which maps [-10000 - 1000] to +10dB - -100dB (inf)
+    :ivar afv: Enable/disabled state for master audio-follow-video (for fade-to-black)
+    """
+
+    def __init__(self, raw):
+        self.raw = raw
+        field = struct.unpack('>H B 2x ? B B x H h x x x', raw)
+        self.index = field[0]
+        self.type = field[1]
+        self.is_media_player = field[2]
+        self.number = field[3]
+        self.mix_option = field[4]
+        self.volume = field[5]
+        self.balance = field[6]
+
+        self.strip_id = str(self.index) + '.0'
+
+    def __repr__(self):
+        return '<audio-mixer-input-properties: index={} volume={} balance={} >'.format(self.strip_id, self.volume,
+                                                                                       self.balance)
+
+
+class AudioMixerTallyField(FieldBase):
+    """
+    Data from the `AMTl`. Encodes the state of tally lights on the audio mixer
+
+    ====== ==== ====== ===========
+    Offset Size Type   Descriptions
+    ====== ==== ====== ===========
+    0      2    u16    Number of tally lights
+    2      2    u16    Audio Source
+    4      1    bool   IsMixedIn (On/Off)
+    ====== ==== ====== ===========
+    """
+
+    def __init__(self, raw):
+        self.raw = raw
+        offset = 0
+        self.num, = struct.unpack_from('>H', raw, offset)
+        self.tally = {}
+        offset += 2
+        for i in range(0, self.num):
+            source, tally, = struct.unpack_from('>H?', raw, offset)
+            strip_id = '{}.{}'.format(source, 0)
+            self.tally[strip_id] = tally
+            offset += 3
+
+    def __repr__(self):
+        return '<audio-mixer-tally {}>'.format(self.tally)
+
+
 class FairlightMasterPropertiesField(FieldBase):
     """
     Data from the `FAMP`. Settings for the master bus on fairlight audio units.
diff --git a/pyatem/protocol.py b/pyatem/protocol.py
index 2129b4b..449df93 100644
--- a/pyatem/protocol.py
+++ b/pyatem/protocol.py
@@ -77,6 +77,9 @@ class AtemProtocol:
             'AuxS': 'aux-output-source',
             'MPfe': 'mediaplayer-file-info',
             'MPCE': 'mediaplayer-selected',
+            'AMMO': 'audio-mixer-master-properties',
+            # 'AMIP': 'audio-mixer-input-properties',
+            'AMTl': 'audio-mixer-tally',
             'FASP': 'fairlight-strip-properties',
             'FAMP': 'fairlight-master-properties',
             '_TlC': 'tally-config',
@@ -112,6 +115,7 @@ class AtemProtocol:
             'transition-wipe': '>B',
             'transition-dve': '>B',
             'transition-stinger': '>B',
+            # 'audio-mixer-input-properties': '>H',
             'fairlight-strip-properties': '>H',
             'macro-properties': '>H',
             'fairlight-audio-input': '>H',
@@ -159,7 +163,7 @@ if __name__ == '__main__':
 
     logging.basicConfig(level=logging.INFO)
 
-    testmixer = AtemProtocol('192.168.2.17')
+    testmixer = AtemProtocol('192.168.2.251')
 
     waiter = 5
     waiting = False
